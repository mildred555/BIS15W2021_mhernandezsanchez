UC_admit %>%
filter(category == "Enrollees")
filter(campus == input$x) %>%
filter(ethnicity == input$y) %>%
filter(academic_yr == input$z) %>%
ggplot(aes_string(x = "category", y= "filtered_count_fr"))+
geom_col()+
theme_light(base_size = 18)
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Enrollment"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(
selectInput("x", "Select Campus", choices = c("Davis", "Berkeley", "Irivine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"), selected = "Davis"),
selectInput("y", "Select Ethnicity", choices = c("African American", "American Indian", "Asian", "Chicano/Latino", "International", "Unknown", "White", "All"), selected = "African American"),
selectInput("z", "Select Academic Year", choices = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"), selected = "2019"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5)
),
box(
plotOutput("UC_Enrollment_Plot", width = "800px", height = "800px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$UC_Admissions_Plot <- renderPlot({
UC_admit %>%
filter(category == "Enrollees") %>%
filter(campus == input$x) %>%
filter(ethnicity == input$y) %>%
filter(academic_yr == input$z) %>%
ggplot(aes_string(x = "category", y= "filtered_count_fr"))+
geom_col()+
theme_light(base_size = 18)
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(skin = "yellow",
dashboardHeader(title = "Diversity of UC Admissions by Campus"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Admissions Option", choices = c("Campus", "Academic_Yr", "Category"), selected = "Campus"),
), # close the first box
box(title = "UC Admissions Diversity", width = 6,
plotOutput("plot", width = "900px", height = "900px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(Ethnicity != "All") %>%
ggplot(aes_string(x = input$x, y = "FilteredCountFR", fill="Ethnicity")) + geom_col(position = "dodge", size=5, alpha=0.8)+
theme_light(base_size = 18)+
labs(x = NULL, y = "Number of Individuals", fill = "Legend")+
theme(axis.text.x = element_text(angle = 65, hjust = 1))
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
#?iris
data(iris)                          # Loading data frame
head(iris)                          # Head of example data
iris1 <- iris                       # Replicate example data
i <- 1 #starting from column 1
repeat{
iris1[ , i] <- iris1[ , i] * 10
i <- i + 1
if(!is.numeric(iris1[ , i])){
break
}
}
head(iris1)
head(iris)                                        # Showing head of data in RStudio console
iris2 <- iris                                     # Replicate example data
i <- 1
while(is.numeric(iris2[ , i])){ #run the loop when numeric #when condition is true, it'll start running the loop
iris2[ , i] <- iris2[ , i] * 10
i <- i + 1
}
head(iris2)
data3 <- data                       # Replicate example data
data3
for(i in 1:2) {           # for-loop over columns
data3[ , i] <- data3[ , i] + 100 #takes value in column and add 100 and then save to data3[ , i]
}
data3 <- data                       # Replicate example data
data3
for(i in 1:2) {           # for-loop over columns, only columns 1 and 2 are changed
data3[ , i] <- data3[ , i] + 100 #takes value in column and add 100 and then save to data3[ , i]
}
library(tidyverse)
library(ggmap)
library(lubridate)
repeat {
commands
if(condition) {
break
}
}
x <- 0                 # Preliminary specification of data object
repeat{                # Head of repeat-loop
x <- x + 1           # Body of repeat-loop
print(x)
if(x >= 10) {        # Break condition of repeat-loop
break
}
}
data <- data.frame(x1 = 1:5,      # Create example data
x2 = 6:10,
x3 = 11:15)
data
data1 <- data                   # Replicate example data
i <- 1                          # Create running index
repeat{                         # Start repeat-loop
data1[ , i] <- data1[ , i] + 100
i <- i + 1
if(i > 2) {
break
}
}
data1
#?iris
data(iris)                          # Loading data frame
head(iris)                          # Head of example data
iris1 <- iris                       # Replicate example data
i <- 1 #starting from column 1
repeat{
iris1[ , i] <- iris1[ , i] * 10
i <- i + 1
if(!is.numeric(iris1[ , i])){ #stops it when it reaches the non-numeric column
break
}
}
head(iris1)
while (test_expression) {
statement
}
x <- 0                  # Preliminary specification of data object
while(x < 10) {         # Head of while-loop
x <- x + 1            # Body of while-loop
print(x)
}
data2 <- data                       # Replicate example data
data2
i <- 1                              # Create running index
while(i <= 2) {                     # Start while-loop
data2[ , i] <- data2[ , i] + 100
i <- i + 1
}
data2
head(iris)                                        # Showing head of data in RStudio console
iris2 <- iris                                     # Replicate example data
i <- 1
while(is.numeric(iris2[ , i])){ #run the loop when numeric #when condition is true, it'll start running the loop
iris2[ , i] <- iris2[ , i] * 10
i <- i + 1
}
head(iris2)
for (value in vector) {
statements
}
for (i in 1:10) {
print(i)
}
data3 <- data                       # Replicate example data
data3
for(i in 1:2) {           # for-loop over columns, only columns 1 and 2 are changed
data3[ , i] <- data3[ , i] + 100
}
data3
ui <- dashboardPage(
dashboardHeader(title = "UC Admissions"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(
selectInput("x", "Select Campus", choices = c("Davis", "Berkeley", "Irivine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"), selected = "Davis"),
selectInput("y", "Select Academic Year", choices = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"), selected = "2019"),
selectInput("z", "Select Category", choices = c("Admits", "Applicants", "Enrollees"), selected = "Admits"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5)
),
box(
plotOutput("UC_Admissions_Plot", width = "800px", height = "800px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$UC_Admissions_Plot <- renderPlot({
UC_admit %>%
filter(campus == input$x) %>%
filter(academic_yr == input$y) %>%
filter(category == input$z) %>%
filter(filtered_count_fr!="NA") %>%
ggplot(aes_string(x = "ethnicity", y= "filtered_count_fr"))+
geom_col()+
theme_light(base_size = 18)
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Enrollment"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(
selectInput("x", "Select Campus", choices = c("Davis", "Berkeley", "Irivine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"), selected = "Davis"),
selectInput("y", "Select Ethnicity", choices = c("African American", "American Indian", "Asian", "Chicano/Latino", "International", "Unknown", "White", "All"), selected = "African American"),
selectInput("z", "Select Academic Year", choices = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"), selected = "2019"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5)
),
box(
plotOutput("UC_Enrollment_Plot", width = "800px", height = "800px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$UC_Admissions_Plot <- renderPlot({
UC_admit %>%
filter(category == "Enrollees") %>%
filter(campus == input$x) %>%
filter(ethnicity == input$y) %>%
filter(academic_yr == input$z) %>%
ggplot(aes_string(x = "category", y= "filtered_count_fr"))+
geom_col()+
theme_light(base_size = 18)
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Enrollment"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(
selectInput("x", "Select Campus", choices = c("Davis", "Berkeley", "Irivine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"), selected = "Davis"),
selectInput("y", "Select Ethnicity", choices = c("African American", "American Indian", "Asian", "Chicano/Latino", "International", "Unknown", "White", "All"), selected = "African American"),
selectInput("z", "Category", choices = c("Applicants", "Enrollees", "Admits"), selected = "Applicants"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5)
),
box(
plotOutput("UC_Enrollment_Plot", width = "800px", height = "800px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$UC_Admissions_Plot <- renderPlot({
UC_admit %>%
filter(campus == input$x) %>%
filter(ethnicity == input$y) %>%
filter(category== input$z) %>%
ggplot(aes_string(x = "academic_yr", y= "filtered_count_fr"))+
geom_col()+
theme_light(base_size = 18)
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Enrollment"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(
selectInput("x", "Select Campus", choices = c("Davis", "Berkeley", "Irivine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"), selected = "Davis"),
selectInput("y", "Select Ethnicity", choices = c("African American", "American Indian", "Asian", "Chicano/Latino", "International", "Unknown", "White", "All"), selected = "African American"),
selectInput("z", "Category", choices = c("Applicants", "Enrollees", "Admits"), selected = "Applicants"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5)
),
box(
plotOutput("UC_Enrollment_Plot", width = "800px", height = "800px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$UC_Admissions_Plot <- renderPlot({
UC_admit %>%
filter(campus == input$x) %>%
filter(ethnicity == input$y) %>%
filter(category== input$z) %>%
ggplot(aes_string(x = "academic_yr", y= "filtered_count_fr"))+
geom_col()+
theme_light(base_size = 18)
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Enrollment"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(
selectInput("x", "Select Campus", choices = c("Davis", "Berkeley", "Irivine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"), selected = "Davis"),
selectInput("y", "Select Ethnicity", choices = c("African American", "American Indian", "Asian", "Chicano/Latino", "International", "Unknown", "White", "All"), selected = "African American"),
selectInput("z", "Category", choices = c("Applicants", "Enrollees", "Admits"), selected = "Applicants"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5)
),
box(
plotOutput("UC_Enrollment_Plot", width = "800px", height = "800px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$UC_Admissions_Plot <- renderPlot({
UC_admit %>%
filter(campus == input$x) %>%
filter(ethnicity == input$y) %>%
filter(category== input$z) %>%
ggplot(aes(x = "academic_yr", y= "filtered_count_fr"))+
geom_col()+
theme_light(base_size = 18)
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Enrollment"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(
selectInput("x", "Select Campus", choices = c("Davis", "Berkeley", "Irivine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"), selected = "Davis"),
selectInput("y", "Select Ethnicity", choices = c("African American", "American Indian", "Asian", "Chicano/Latino", "International", "Unknown", "White", "All"), selected = "African American"),
selectInput("z", "Category", choices = c("Applicants", "Enrollees", "Admits"), selected = "Applicants"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5)
),
box(
plotOutput("UC_Enrollment_Plot", width = "800px", height = "800px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$UC_Enrollment_Plot <- renderPlot({
UC_admit %>%
filter(campus == input$x) %>%
filter(ethnicity == input$y) %>%
filter(category== input$z) %>%
ggplot(aes(x = "academic_yr", y= "filtered_count_fr"))+
geom_col()+
theme_light(base_size = 18)
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Enrollment"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(
selectInput("x", "Select Campus", choices = c("Davis", "Berkeley", "Irivine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"), selected = "Davis"),
selectInput("y", "Select Ethnicity", choices = c("African American", "American Indian", "Asian", "Chicano/Latino", "International", "Unknown", "White", "All"), selected = "African American"),
selectInput("z", "Category", choices = c("Applicants", "Enrollees", "Admits"), selected = "Applicants"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5)
),
box(
plotOutput("UC_Enrollment_Plot", width = "800px", height = "800px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$UC_Enrollment_Plot <- renderPlot({
UC_admit %>%
filter(campus == input$x) %>%
filter(ethnicity == input$y) %>%
filter(category== input$z) %>%
ggplot(aes(x = "academic_yr", y= "filtered_count_fr"))+
geom_col()+
theme_light(base_size = 18)
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Enrollment"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(
selectInput("x", "Select Campus", choices = c("Davis", "Berkeley", "Irivine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"), selected = "Davis"),
selectInput("y", "Select Ethnicity", choices = c("African American", "American Indian", "Asian", "Chicano/Latino", "International", "Unknown", "White", "All"), selected = "African American"),
selectInput("z", "Category", choices = c("Applicants", "Enrollees", "Admits"), selected = "Applicants"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 2, value = 2, step = 0.5)
),
box(
plotOutput("UC_Enrollment_Plot", width = "800px", height = "800px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$UC_Enrollment_Plot <- renderPlot({
UC_admit %>%
filter(campus == input$x) %>%
filter(ethnicity == input$y) %>%
filter(category== input$z) %>%
ggplot(aes(x = "academic_yr", y= "filtered_count_fr"))+
geom_col()+
theme_light(base_size = 18)
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Enrollment"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(
selectInput("x", "Select Campus", choices = c("Davis", "Berkeley", "Irivine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"), selected = "Davis"),
selectInput("y", "Select Ethnicity", choices = c("African American", "American Indian", "Asian", "Chicano/Latino", "International", "Unknown", "White", "All"), selected = "African American"),
selectInput("z", "Category", choices = c("Applicants", "Enrollees", "Admits"), selected = "Applicants"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 2, value = 2, step = 0.5)
),
box(
plotOutput("UC_Enrollment_Plot", width = "800px", height = "800px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$UC_Enrollment_Plot <- renderPlot({
UC_admit %>%
filter(campus == input$x) %>%
filter(ethnicity == input$y) %>%
filter(category== input$z) %>%
ggplot(aes(x = "academic_yr", y= "filtered_count_fr"))+
geom_col(size=5)+
theme_light(base_size = 18)
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Enrollment"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(
selectInput("x", "Select Campus", choices = c("Davis", "Berkeley", "Irivine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"), selected = "Davis"),
selectInput("y", "Select Ethnicity", choices = c("African American", "American Indian", "Asian", "Chicano/Latino", "International", "Unknown", "White", "All"), selected = "African American"),
selectInput("z", "Category", choices = c("Applicants", "Enrollees", "Admits"), selected = "Applicants"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 2, value = 2, step = 0.5)
),
box(
plotOutput("UC_Enrollment_Plot", width = "800px", height = "800px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$UC_Enrollment_Plot <- renderPlot({
UC_admit %>%
filter(campus == input$x) %>%
filter(ethnicity == input$y) %>%
filter(category== input$z) %>%
ggplot(aes(x = "academic_yr", y= "filtered_count_fr"))+
geom_col(size=5, alpha=0.8)+
theme_light(base_size = 18)
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Enrollment"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(
selectInput("x", "Select Campus", choices = c("Davis", "Berkeley", "Irivine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"), selected = "Davis"),
selectInput("y", "Select Ethnicity", choices = c("African American", "American Indian", "Asian", "Chicano/Latino", "International", "Unknown", "White", "All"), selected = "African American"),
selectInput("z", "Category", choices = c("Applicants", "Enrollees", "Admits"), selected = "Applicants"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 2, value = 2, step = 0.5)
),
box(
plotOutput("UC_Enrollment_Plot", width = "800px", height = "800px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$UC_Enrollment_Plot <- renderPlot({
UC_admit %>%
filter(campus == input$x) %>%
filter(ethnicity == input$y) %>%
filter(category== input$z) %>%
ggplot(aes(x = academic_yr, y= filtered_count_fr))+
geom_col(size=5, alpha=0.8)+
theme_light(base_size = 18)
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
