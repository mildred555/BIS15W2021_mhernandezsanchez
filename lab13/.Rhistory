dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_depth_mm"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5)
), # close the first box
box(title = "Plot of Iris Data", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(penguins, aes_string(x = input$x, y = input$y, color="species")) + geom_point(size=input$pointsize, alpha=0.8) + theme_light(base_size = 18)
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Penguins"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_depth_mm"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5)
), # close the first box
box(title = "Plot of Iris Data", width = 10,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(penguins, aes_string(x = input$x, y = input$y, color="species")) + geom_point(size=input$pointsize, alpha=0.8) + theme_light(base_size = 18)
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Penguins"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_depth_mm"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5)
), # close the first box
box(title = "Plot of Iris Data", width = 8,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(penguins, aes_string(x = input$x, y = input$y, color="species")) + geom_point(size=input$pointsize, alpha=0.8) + theme_light(base_size = 18)
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Penguins"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_depth_mm"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5)
), # close the first box
box(title = "Plot of Iris Data", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(penguins, aes_string(x = input$x, y = input$y, color="species")) + geom_point(size=input$pointsize, alpha=0.8) + theme_light(base_size = 18)
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Relative Abundance"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select RA Taxon", choices = c("RA_Apes", "RA_Birds", "RA_Elephant", "RA_Monkeys", "RA_Rodent", "RA_Ungulate"),
selected = "RA_Apes"),
hr(),
helpText("Reference: Koerner SE, Poulsen JR, Blanchard EJ, Okouyi J, Clark CJ. Vertebrate community composition and diversity declines along a defaunation gradient radiating from rural villages in Gabon. Journal of Applied Ecology. 2016.")
), # close the first box
box(title = "Relative Abundance %", width = 6,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
gabon %>%
ggplot(aes_string(x = "Distance", y = input$x)) +
geom_point(size=4)+
geom_smooth(method=lm, se=T)+
scale_x_continuous(breaks=seq(0, 30, by = 5))+ theme_light(base_size = 18)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
gabon <- readr::read_csv("data/IvindoData_DryadVersion.csv")
ui <- dashboardPage(
dashboardHeader(title = "Relative Abundance"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select RA Taxon", choices = c("RA_Apes", "RA_Birds", "RA_Elephant", "RA_Monkeys", "RA_Rodent", "RA_Ungulate"),
selected = "RA_Apes"),
hr(),
helpText("Reference: Koerner SE, Poulsen JR, Blanchard EJ, Okouyi J, Clark CJ. Vertebrate community composition and diversity declines along a defaunation gradient radiating from rural villages in Gabon. Journal of Applied Ecology. 2016.")
), # close the first box
box(title = "Relative Abundance %", width = 6,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
gabon %>%
ggplot(aes_string(x = "Distance", y = input$x)) +
geom_point(size=4)+
geom_smooth(method=lm, se=T)+
scale_x_continuous(breaks=seq(0, 30, by = 5))+ theme_light(base_size = 18)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
knitr::opts_chunk$set(echo = TRUE)
if (!require("tidyverse")) install.packages('tidyverse')
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
#install.packages("shiny")
library(shiny)
library(shinydashboard)
library(tidyverse)
library(palmerpenguins)
runApp("plot_iris.R")
names(penguins)
knitr::opts_chunk$set(echo = TRUE)
wolves %>%
group_by(pop) %>%
summarize(mean_pack_size = mean(pack.size))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(janitor)
library(here)
library(ggmap)
library(albersusa)
grizzly <- readr::read_csv("data/bear-sightings.csv")
grizzly
grizzly %>%
select(latitude, longitude) %>%
summary()
lat <- c(55.02, 70.37)
long <- c(-166.2, -131.3)
bbox <- make_bbox(long, lat, f = 0.05)
map_1 <- get_map(bbox, maptype = "terrain", source = "stamen")
ggmap(map_1)
ggmap(map_1)+
geom_point(data = grizzly, aes(x=longitude, y=latitude))+
labs(x="Longitude", y="Latitude", title = "Grizzly Bear Locations")
wolves <- readr::read_csv("data/wolves_data/wolves_dataset.csv")
wolves
wolves$pop <- as.factor(wolves$pop)
wolves %>%
summarize(n_wolf_pop = n_distinct(pop))
wolves_48 <- wolves %>%
filter(lat<=49) %>%
arrange(desc(lat))
wolves_48
wolves_48 %>%
summarize(n_wolf_pop_48 = n_distinct(pop))
us_comp <- usa_sf()
us_comp
not_alaska_hawaii <- us_comp %>%
filter(name!="Alaska" & name!="Hawaii")
wolves %>%
ggplot() +
geom_sf(data = not_alaska_hawaii, size = 0.125) +
theme_linedraw()+
labs(title = "Lower 48 US States")
wolves %>%
ggplot() +
geom_sf(data = not_alaska_hawaii, size = 0.125) +
theme_linedraw()+
labs(title = "Lower 48 US States") +
geom_point(data=wolves_48, aes(long, lat))
wolves %>%
group_by(pop) %>%
summarize(mean_pack_size = mean(pack.size))
wolves %>%
group_by(pop) %>%
summarize(mean_pack_size = mean(pack.size))
ggplot() +
geom_sf(data = not_alaska_hawaii) +
theme_linedraw()+
labs(title = "Lower 48 US States") +
geom_point(data=wolves_48, aes(long, lat), (size=pack.size))
wolves %>%
group_by(pop) %>%
summarize(mean_pack_size = mean(pack.size))
ggplot() +
geom_sf(data = not_alaska_hawaii) +
theme_linedraw()
wolves %>%
group_by(pop) %>%
summarize(mean_pack_size = mean(pack.size))
ggplot() +
geom_sf(data = not_alaska_hawaii, size=0.125) +
theme_linedraw()
wolves %>%
ggplot() +
geom_sf(data = not_alaska_hawaii, size=0.125) +
theme_linedraw()
wolves %>%
ggplot() +
geom_sf(data = not_alaska_hawaii, size=0.125) +
theme_linedraw()+
labs(title = "Lower 48 US States") +
geom_point(data=wolves_48, aes(long, lat), (size=pack.size))
wolves %>%
ggplot() +
geom_sf(data = not_alaska_hawaii, size=0.125) +
theme_linedraw()+
labs(title = "Lower 48 US States") +
geom_point(data=wolves_48, aes(long, lat, size=pack.size))
wolves %>%
ggplot() +
geom_sf(data = not_alaska_hawaii, size=0.125) +
theme_linedraw()+
labs(title = "Wolf Packs in the Lower 48 US States") +
geom_point(data=wolves_48, aes(long, lat, size=pack.size))
wolves %>%
ggplot() +
geom_sf(data = not_alaska_hawaii, size=0.1) +
theme_linedraw()+
labs(title = "Wolf Packs in the Lower 48 US States") +
geom_point(data=wolves_48, aes(long, lat, size=pack.size))
wolves %>%
ggplot() +
geom_sf(data = not_alaska_hawaii, size=0.7) +
theme_linedraw()+
labs(title = "Wolf Packs in the Lower 48 US States") +
geom_point(data=wolves_48, aes(long, lat, size=pack.size))
wolves %>%
ggplot() +
geom_sf(data = not_alaska_hawaii, size=0.125) +
theme_linedraw()+
labs(title = "Wolf Packs in the Lower 48 US States") +
geom_point(data=wolves_48, aes(long, lat, size=pack.size))
wolves %>%
ggplot() +
geom_sf(data = not_alaska_hawaii, size=0.125) +
theme_linedraw()+
labs(title = "Wolf Packs in the Lower 48 US States",
x="Longitude", y="Latitude") +
geom_point(data=wolves_48, aes(long, lat, size=pack.size))
wolves %>%
ggplot() +
geom_sf(data = not_alaska_hawaii, size = 0.125) +
theme_linedraw()+
labs(title = "Lower 48 US States",
x="Longitude", y="Latitude") +
geom_point(data=wolves_48, aes(long, lat))
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm") #the drop down menu choices
selectInput("y", "Select y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm") #the drop down menu choices
selectInput("y", "Select y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm")
selectInput("y", "Select y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"))#the drop down menu choices
server <- function(input, output) {
reactive({input$x
input$y})
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"), plotOutput("plot", width="500px", height="400px"))
server <- function(input, output) {
output$plot <-renderPlot({ggplot(penguins, aes_string(x=input$x, y=input$y, color="species"))+
geom_point()+
theme_light(base_size=18)})
}
shinyApp(ui, server)
homerange <- readr::read_csv("data/Tamburelloetal_HomeRangeDatabase.csv")
homerange %>%
ggplot(aes(x=locomotion, fill=trophic.guild))+
geom_bar(position = dodge)
homerange %>%
ggplot(aes(x=locomotion, fill=trophic.guild))+
geom_bar(position = "dodge")
homerange %>%
ggplot(aes(x=locomotion, fill=thermoregulation))+
geom_bar(position = "dodge")
library(shiny)
ui <- fluidPage(titlePanel("Homerange Locomotion"),
radioButtons("x", "select Fill Varaible", choices = c("trophic.guild", "thermoregulation"), selected = "trophic.guild"), plotOutput("plot", width="600px", height= "500px"))
server <- function(input, output, session) {
output$plot <- renderPlot({ggplot(homerange, aes_string(x="locomotion", fill=input$x))+
geom_bar(position="dodge"), alpha=0.8, color="black")+
library(shiny)
ui <- fluidPage(titlePanel("Homerange Locomotion"),
radioButtons("x", "select Fill Varaible", choices = c("trophic.guild", "thermoregulation"), selected = "trophic.guild"), plotOutput("plot", width="600px", height= "500px"))
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(homerange, aes_string(x="locomotion", fill=input$x))+
geom_bar(position="dodge"), alpha=0.8, color="black")+
library(shiny)
ui <- fluidPage(titlePanel("Homerange Locomotion"),
radioButtons("x", "select Fill Varaible", choices = c("trophic.guild", "thermoregulation"), selected = "trophic.guild"), plotOutput("plot", width="600px", height= "500px"))
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(homerange, aes_string(x="locomotion", fill=input$x))+
geom_bar(position="dodge"), alpha=0.8, color="black")+
library(shiny)
ui <- fluidPage(titlePanel("Homerange Locomotion"),
radioButtons("x", "select Fill Varaible", choices = c("trophic.guild", "thermoregulation"), selected = "trophic.guild"), plotOutput("plot", width="600px", height= "500px"))
server <- function(input, output, session){
output$plot <- renderPlot({
ggplot(homerange, aes_string(x="locomotion", fill=input$x))+
geom_bar(position="dodge", alpha=0.8, color="black")+
theme_light(base_size = 18)+
labs(x=NULL, y=NULL, fill="Fill Variable")})
library(shiny)
ui <- fluidPage(titlePanel("Homerange Locomotion"),
radioButtons("x", "select Fill Varaible", choices = c("trophic.guild", "thermoregulation"), selected = "trophic.guild"), plotOutput("plot", width="600px", height= "500px"))
server <- function(input, output, session){output$plot <- renderPlot({
ggplot(homerange, aes_string(x="locomotion", fill=input$x))+
geom_bar(position="dodge", alpha=0.8, color="black")+
theme_light(base_size = 18)+
labs(x=NULL, y=NULL, fill="Fill Variable")})
library(shiny)
ui <- fluidPage(titlePanel("Homerange Locomotion"),
radioButtons("x", "select Fill Varaible", choices = c("trophic.guild", "thermoregulation"), selected = "trophic.guild"), plotOutput("plot", width="600px", height= "500px"))
server <- function(input, output, session){output$plot <- renderPlot({ggplot(homerange, aes_string(x="locomotion", fill=input$x))+
geom_bar(position="dodge", alpha=0.8, color="black")+
theme_light(base_size = 18)+
labs(x=NULL, y=NULL, fill="Fill Variable")})
library(shiny)
ui <- fluidPage(titlePanel("Homerange Locomotion"),
radioButtons("x", "select Fill Varaible", choices = c("trophic.guild", "thermoregulation"), selected = "trophic.guild"), plotOutput("plot", width="600px", height= "500px"))
server <- function(input, output, session)
{output$plot <- renderPlot({ggplot(homerange, aes_string(x="locomotion", fill=input$x))+
geom_bar(position="dodge", alpha=0.8, color="black")+
theme_light(base_size = 18)+
labs(x=NULL, y=NULL, fill="Fill Variable")})
library(shiny)
ui <- fluidPage(titlePanel("Homerange Locomotion"),
radioButtons("x", "select Fill Varaible", choices = c("trophic.guild", "thermoregulation"), selected = "trophic.guild"), plotOutput("plot", width="600px", height= "500px"))
server <- function(input, output, session){
output$plot <- renderPlot({ggplot(homerange, aes_string(x="locomotion", fill=input$x))+
geom_bar(position="dodge", alpha=0.8, color="black")+
theme_light(base_size = 18)+
labs(x=NULL, y=NULL, fill="Fill Variable")}
library(shiny)
ui <- fluidPage(titlePanel("Homerange Locomotion"),
radioButtons("x", "select Fill Varaible", choices = c("trophic.guild", "thermoregulation"), selected = "trophic.guild"), plotOutput("plot", width="600px", height= "500px"))
server <- function(input, output, session){
output$plot <- renderPlot({ggplot(homerange, aes_string(x="locomotion", fill=input$x))+
geom_bar(position="dodge", alpha=0.8, color="black")+
theme_light(base_size = 18)+
labs(x=NULL, y=NULL, fill="Fill Variable")})}
library(shiny)
ui <- fluidPage(titlePanel("Homerange Locomotion"),
radioButtons("x", "select Fill Varaible", choices = c("trophic.guild", "thermoregulation"), selected = "trophic.guild"), plotOutput("plot", width="600px", height= "500px"))
server <- function(input, output, session){
output$plot <- renderPlot({
ggplot(homerange, aes_string(x="locomotion", fill=input$x))+
geom_bar(position="dodge", alpha=0.8, color="black")+
theme_light(base_size = 18)+
labs(x=NULL, y=NULL, fill="Fill Variable")})}
install.packages("shinydashboard")
knitr::opts_chunk$set(echo = TRUE)
if (!require("tidyverse")) install.packages('tidyverse')
library(tidyverse)
library(shiny)
library(shinydashboard)
UC_admit <- readr::read_csv("data/UC_admit.csv")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library("tidyverse")
library("shiny")
library("naniar")
library("shinydashboard")
if (!require("tidyverse")) install.packages('tidyverse')
ui <- fluidPage(
titlePanel("Log 10 Homerange by Taxon"),
sidebarLayout(
sidebarPanel(
selectInput("taxon", " Select Taxon of Interest:", choices=unique(homerange$taxon)),
hr(),
helpText("Reference: Tamburello N, Cote IM, Dulvy NK (2015) Energy and the scaling of animal space use. The American Naturalist 186(2):196-211.")
),
mainPanel(
plotOutput("taxonPlot")
)
)
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$taxonPlot <- renderPlot({
homerange %>%
filter(taxon == input$taxon) %>%
ggplot(aes(x=log10.hra)) +
geom_density(color="black", fill="steelblue", alpha=0.6)
})
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_depth_mm"),
sliderInput("fontsize", "Select the Font Size", min = 10, max = 24, value = 18, step = 1),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
ggplot(penguins, aes_string(x = input$x, y = input$y, color="species")) + geom_point() + theme_light(base_size = input$fontsize)
})
}
shinyApp(ui, server)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library("tidyverse")
library("shiny")
library("naniar")
library("shinydashboard")
if (!require("tidyverse")) install.packages('tidyverse')
#install.packages("shinydashboard")
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody()
)
server <- function(input, output) { }
shinyApp(ui, server)
gabon <- readr::read_csv("data/IvindoData_DryadVersion.csv")
names(gabon)
glimpse(gabon)
ui <- dashboardPage(
dashboardHeader(title = "Relative Abundance"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select RA Taxon", choices = c("RA_Apes", "RA_Birds", "RA_Elephant", "RA_Monkeys", "RA_Rodent", "RA_Ungulate"),
selected = "RA_Apes"),
hr(),
helpText("Reference: Koerner SE, Poulsen JR, Blanchard EJ, Okouyi J, Clark CJ. Vertebrate community composition and diversity declines along a defaunation gradient radiating from rural villages in Gabon. Journal of Applied Ecology. 2016.")
), # close the first box
box(title = "Relative Abundance %", width = 6,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
gabon %>%
ggplot(aes_string(x = "Distance", y = input$x)) +
geom_point(size=4)+
geom_smooth(method=lm, se=T)+
scale_x_continuous(breaks=seq(0, 30, by = 5))+ theme_light(base_size = 18)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
