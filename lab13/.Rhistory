# create a spot for the barplot
mainPanel(
plotOutput("UC_Admissions_Plot")
)
)
)
server <- function(input, output, session) {
knitr::opts_chunk$set(echo = TRUE)
if (!require("tidyverse")) install.packages('tidyverse') #if tidyverse isn't installed, it gets installed
library(tidyverse)
library(shiny)
library(shinydashboard)
UC_admit <- readr::read_csv("data/UC_admit.csv")
glimpse(UC_admit)
summary(UC_admit)
naniar::miss_var_summary(UC_admit)
UC_admit %>%
select('Perc FR') %>%
anyNA()#line 148
UC_admit <- janitor::clean_names(UC_admit)
UC_admit$academic_yr <- as.factor(UC_admit$academic_yr)
ui <- dashboardPage(,
dashboardHeader(title = "UC Admissions"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Fill Variable", choices = c("campus", "academic_yr", "category"), selected = "campus"),
selectInput("y", "Select Fill Variable", choices = c("campus", "academic_yr", "category"), selected = "academic_yr"),
selectInput("z", "Select Fill Variable", choices = c("campus", "academic_yr", "category"), selected = "category"),
hr(),
helpText("https://www.universityofcalifornia.edu/infocenter")
),
# create a spot for the barplot
mainPanel(
plotOutput("UC_Admissions_Plot")
)
)
)
server <- function(input, output, session) {
ui <- dashboardPage(
dashboardHeader(title = "UC Admissions")
dashboardSidebar(disable = T)
ui <- dashboardPage(
dashboardHeader(title = "UC Admissions"),
dashboardSidebar(disable = T)
dashboardBody(
ui <- dashboardPage(
dashboardHeader(title = "UC Admissions"),
dashboardSidebar(disable = T)
dashboardBody(
ui <- dashboardPage(
dashboardHeader(title = "UC Admissions"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(
selectInput("x", "Select Fill Variable", choices = c("campus", "academic_yr", "category"), selected = "campus"),
selectInput("y", "Select Fill Variable", choices = c("campus", "academic_yr", "category"), selected = "academic_yr"),
selectInput("z", "Select Fill Variable", choices = c("campus", "academic_yr", "category"), selected = "category"),
hr(),
helpText("https://www.universityofcalifornia.edu/infocenter")
),
# create a spot for the barplot
mainPanel(
plotOutput("UC_Admissions_Plot")
)
)
)
server <- function(input, output, session) {
ui <- dashboardPage(
dashboardHeader(title = "UC Admissions"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(
selectInput("x", "Select Fill Variable", choices = c("campus", "academic_yr", "category"), selected = "campus"),
selectInput("y", "Select Fill Variable", choices = c("campus", "academic_yr", "category"), selected = "academic_yr"),
selectInput("z", "Select Fill Variable", choices = c("campus", "academic_yr", "category"), selected = "category"),
hr(),
helpText("https://www.universityofcalifornia.edu/infocenter")
),
# create a spot for the barplot
mainPanel(
plotOutput("UC_Admissions_Plot")
)
)
)
)
server <- function(input, output, session) {
output$UC_Admissions_Plot <- renderPlot({
UC_admit %>%
filter(ethnicity == input$ethnicity)
ggplot(UC_admit, aes_string(x = input$x, y = input$y, z= input$z, color="ethnicity"))+
geom_col()+
theme_light(base_size = 18)
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Admissions"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(
selectInput("x", "Select Fill Variable", choices = c("campus", "academic_yr", "category"), selected = "campus"),
selectInput("y", "Select Fill Variable", choices = c("campus", "academic_yr", "category"), selected = "academic_yr"),
selectInput("z", "Select Fill Variable", choices = c("campus", "academic_yr", "category"), selected = "category"),
hr(),
helpText("https://www.universityofcalifornia.edu/infocenter")
),
# create a spot for the barplot
mainPanel(
plotOutput("UC_Admissions_Plot")
)
)
)
)
server <- function(input, output, session) {
output$UC_Admissions_Plot <- renderPlot({
UC_admit %>%
filter(ethnicity == input$ethnicity)
ggplot(UC_admit, aes_string(x = input$x, y = input$y, z= input$z, color="ethnicity"))+
geom_col()+
theme_light(base_size = 18)
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Admissions"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(
selectInput("x", "Select Fill Variable", choices = c("campus", "academic_yr", "category"), selected = "campus"),
selectInput("y", "Select Fill Variable", choices = c("campus", "academic_yr", "category"), selected = "academic_yr"),
selectInput("z", "Select Fill Variable", choices = c("campus", "academic_yr", "category"), selected = "category"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5)
),
box(
plotOutput("plot", width = "500px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$UC_Admissions_Plot <- renderPlot({
UC_admit %>%
filter(ethnicity == input$ethnicity)
ggplot(UC_admit, aes_string(x = input$x, y = input$y, z= input$z, color="ethnicity"))+
geom_col()+
theme_light(base_size = 18)
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
if (!require("tidyverse")) install.packages('tidyverse') #if tidyverse isn't installed, it gets installed
library(tidyverse)
library(shiny)
library(shinydashboard)
UC_admit <- readr::read_csv("data/UC_admit.csv")
UC_admit <- janitor::clean_names(UC_admit)
UC_admit$academic_yr <- as.factor(UC_admit$academic_yr)
ui <- dashboardPage(
dashboardHeader(title = "UC Admissions"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(
selectInput("x", "Select Fill Variable", choices = c("campus", "academic_yr", "category"), selected = "campus"),
selectInput("y", "Select Fill Variable", choices = c("campus", "academic_yr", "category"), selected = "academic_yr"),
selectInput("z", "Select Fill Variable", choices = c("campus", "academic_yr", "category"), selected = "category"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5)
),
box(
plotOutput("plot", width = "500px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$UC_Admissions_Plot <- renderPlot({
UC_admit %>%
filter(ethnicity == input$ethnicity)
ggplot(UC_admit, aes_string(x = input$x, y = input$y, z= input$z, color="ethnicity"))+
geom_col()+
theme_light(base_size = 18)
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Admissions"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(
selectInput("x", "Select Fill Variable", choices = c("campus", "academic_yr", "category"), selected = "campus"),
selectInput("y", "Select Fill Variable", choices = c("campus", "academic_yr", "category"), selected = "academic_yr"),
selectInput("z", "Select Fill Variable", choices = c("campus", "academic_yr", "category"), selected = "category"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5)
),
box(
plotOutput("UC_Admissions_Plot", width = "500px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$UC_Admissions_Plot <- renderPlot({
UC_admit %>%
filter(ethnicity == input$ethnicity) %>%
ggplot(UC_admit, aes_string(x = input$x, y = input$y, z= input$z, color="ethnicity"))+
geom_col()+
theme_light(base_size = 18)
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Admissions"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(
selectInput("x", "Select Fill Variable", choices = c("campus", "academic_yr", "category"), selected = "campus"),
selectInput("y", "Select Fill Variable", choices = c("campus", "academic_yr", "category"), selected = "academic_yr"),
selectInput("z", "Select Fill Variable", choices = c("campus", "academic_yr", "category"), selected = "category"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5)
),
box(
plotOutput("UC_Admissions_Plot", width = "500px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$UC_Admissions_Plot <- renderPlot({
UC_admit %>%
filter(ethnicity == input$ethnicity) %>%
ggplot(UC_admit, aes_string(x = input$x, y = input$y, z= input$z, color="ethnicity"))+
geom_col()+
theme_light(base_size = 18)
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Admissions"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(
selectInput("x", "Select Fill Variable", choices = c("campus", "academic_yr", "category"), selected = "campus"),
selectInput("y", "Select Fill Variable", choices = c("campus", "academic_yr", "category"), selected = "academic_yr"),
selectInput("z", "Select Fill Variable", choices = c("campus", "academic_yr", "category"), selected = "category"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5)
),
box(
plotOutput("UC_Admissions_Plot", width = "500px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$UC_Admissions_Plot <- renderPlot({
UC_admit %>%
filter(ethnicity == input$ethnicity) %>%
ggplot(UC_admit, aes_string(x = input$x, y = input$y, z= input$z, color="ethnicity"))+
geom_col()+
theme_light(base_size = 18)
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
library(shiny) #NO
ui <- fluidPage(titlePanel("UC Admissions"),
radioButtons("x", "Select Fill Varaible", choices = c("campus", "academic_yr", "category"), selected = "campus"),
radioButtons("y", "Select Fill Varaible", choices = c("campus", "academic_yr", "category"), selected = "academic_yr"),
radioButtons("z", "Select Fill Varaible", choices = c("campus", "academic_yr", "category"), selected = "category"),
plotOutput("plot", width="600px", height= "500px"))
server <- function(input, output, session){
output$plot <- renderPlot({
UC_admit %>%
filter()
ggplot(UC_admit, aes_string(x="campus", y="filtered_count_fr", fill="ethnicity"))+
geom_col()+
coord_flip()+
theme_light(base_size = 18)+
labs(x=NULL, y=NULL, fill="ethnicity")})}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Admissions"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Fill Variable", choices = c("campus", "academic_yr", "category"), selected = "campus"),
selectInput("y", "Select Fill Variable", choices = c("campus", "academic_yr", "category"), selected = "academic_yr"),
selectInput("z", "Select Fill Variable", choices = c("campus", "academic_yr", "category"), selected = "category"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5)
), # close the first box
box(title = "Plot of UC Admissions Data", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = input$x, y = input$y, z = input$z, color="ethnicity")) + geom_point(size=input$pointsize, alpha=0.8) + theme_light(base_size = 18)
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Admissions"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Fill Variable", choices = c("campus", "academic_yr", "category"), selected = "campus"),
selectInput("y", "Select Fill Variable", choices = c("campus", "academic_yr", "category"), selected = "academic_yr"),
selectInput("z", "Select Fill Variable", choices = c("campus", "academic_yr", "category"), selected = "category"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5)
), # close the first box
box(title = "Plot of UC Admissions Data", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = input$x, y = input$y, z = input$z, color="ethnicity")) + geom_point(size=input$pointsize, alpha=0.8) + theme_light(base_size = 18)
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
UC_admit$academic_yr <- as.factor(UC_admit$academic_yr)
ui <- dashboardPage(
dashboardHeader(title = "UC Admissions"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Fill Variable", choices = c("campus", "academic_yr", "category"), selected = "campus"),
selectInput("y", "Select Fill Variable", choices = c("campus", "academic_yr", "category"), selected = "academic_yr"),
selectInput("z", "Select Fill Variable", choices = c("campus", "academic_yr", "category"), selected = "category"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5)
), # close the first box
box(title = "Plot of UC Admissions Data", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = input$x, y = input$y, z = input$z, color="ethnicity")) + geom_point(size=input$pointsize, alpha=0.8) + theme_light(base_size = 18)
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
library(shiny) #NO
ui <- fluidPage(titlePanel("UC Admissions"),
radioButtons("x", "Select Fill Varaible", choices = c("campus", "academic_yr", "category"), selected = "campus"),
radioButtons("y", "Select Fill Varaible", choices = c("campus", "academic_yr", "category"), selected = "academic_yr"),
radioButtons("z", "Select Fill Varaible", choices = c("campus", "academic_yr", "category"), selected = "category"),
plotOutput("plot", width="600px", height= "500px"))
server <- function(input, output, session){
output$plot <- renderPlot({
UC_admit %>%
filter(ethnicity == input$ethnicity)
ggplot(UC_admit, aes_string(x="campus", y="filtered_count_fr", fill="ethnicity"))+
geom_col()+
coord_flip()+
theme_light(base_size = 18)+
labs(x=NULL, y=NULL, fill="ethnicity")})}
shinyApp(ui, server)
library(shiny) #NO
ui <- fluidPage(titlePanel("UC Admissions"),
radioButtons("x", "Select Fill Varaible", choices = c("campus", "academic_yr", "category"), selected = "campus"),
radioButtons("y", "Select Fill Varaible", choices = c("campus", "academic_yr", "category"), selected = "academic_yr"),
radioButtons("z", "Select Fill Varaible", choices = c("campus", "academic_yr", "category"), selected = "category"),
plotOutput("plot", width="600px", height= "500px"))
server <- function(input, output, session){
output$plot <- renderPlot({
UC_admit %>%
filter(ethnicity == input$ethnicity) %>%
ggplot(UC_admit, aes_string(x="campus", y="filtered_count_fr", fill="ethnicity"))+
geom_col()+
coord_flip()+
theme_light(base_size = 18)+
labs(x=NULL, y=NULL, fill="ethnicity")})}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Admissions"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Fill Variable", choices = c("campus", "academic_yr", "category"), selected = "campus"),
selectInput("y", "Select Fill Variable", choices = c("campus", "academic_yr", "category"), selected = "academic_yr"),
selectInput("z", "Select Fill Variable", choices = c("campus", "academic_yr", "category"), selected = "category"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5)
), # close the first box
box(title = "Plot of UC Admissions Data", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = input$x, y = input$y, z = input$z, color="ethnicity")) + geom_point(size=input$pointsize, alpha=0.8) + theme_light(base_size = 18)
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Admissions"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Fill Variable", choices = c("campus", "academic_yr", "category"), selected = "campus"),
selectInput("y", "Select Fill Variable", choices = c("campus", "academic_yr", "category"), selected = "academic_yr"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5)
), # close the first box
box(title = "Plot of UC Admissions Data", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = input$x, y = input$y, color="ethnicity")) + geom_point(size=input$pointsize, alpha=0.8) + theme_light(base_size = 18)
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Admissions"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Fill Variable", choices = c("campus", "academic_yr", "category"), selected = "campus"),
selectInput("y", "Select Fill Variable", choices = c("campus", "academic_yr", "category"), selected = "academic_yr"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5)
), # close the first box
box(title = "Plot of UC Admissions Data", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = input$x, y = input$y, color="ethnicity")) + geom_point(size=input$pointsize, alpha=0.8) + geom_col()+
theme_light(base_size = 18)
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
library(shiny) #NO
ui <- fluidPage(titlePanel("UC Admissions"),
radioButtons("x", "Select Fill Varaible", choices = c("campus", "academic_yr", "category"), selected = "campus"),
radioButtons("y", "Select Fill Varaible", choices = c("campus", "academic_yr", "category"), selected = "academic_yr"),
radioButtons("z", "Select Fill Varaible", choices = c("campus", "academic_yr", "category"), selected = "category"),
plotOutput("plot", width="600px", height= "500px"))
server <- function(input, output, session){
output$plot <- renderPlot({
UC_admit %>%
filter(ethnicity == input$ethnicity) %>%
ggplot(UC_admit, aes_string(x="campus", y="filtered_count_fr", fill="ethnicity"))+
geom_col()+
coord_flip()+
theme_light(base_size = 18)+
labs(x=NULL, y=NULL, fill="ethnicity")})}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Admissions"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Fill Variable", choices = c("campus", "academic_yr", "category"), selected = "campus"),
selectInput("y", "Select Fill Variable", choices = c("campus", "academic_yr", "category"), selected = "academic_yr"),
selectInput("z", "Select Fill Variable", choices = c("campus", "academic_yr", "category"), selected = "category"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5)
), # close the first box
box(title = "Plot of UC Admissions Data", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = input$x, y = input$y, z= input$z, color="ethnicity")) + geom_point(size=input$pointsize, alpha=0.8) + geom_line()+
theme_light(base_size = 18)
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
